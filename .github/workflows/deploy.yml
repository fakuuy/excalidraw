name: Deploy Excalidraw to VM

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  GITHUB_REPOSITORY: ${{ github.repository }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH key
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add server to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to server
      env:
        GITHUB_REPOSITORY: ${{ github.repository }}
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          export GITHUB_REPOSITORY="${{ github.repository }}"
          # Navigate to project directory
          cd /home/${{ secrets.SSH_USER }}/excalidraw-hosted || {
            echo "Creating project directory..."
            mkdir -p /home/${{ secrets.SSH_USER }}/excalidraw-hosted
            cd /home/${{ secrets.SSH_USER }}/excalidraw-hosted
          }

          # First, get the Excalidraw source code
          if [ -d "excalidraw-source" ]; then
            echo "Updating Excalidraw source..."
            cd excalidraw-source
            git pull origin master
            cd ..
          else
            echo "Cloning Excalidraw source..."
            git clone https://github.com/excalidraw/excalidraw.git excalidraw-source
          fi

          # Get your deployment configuration (this repo)
          if [ -d "deployment-config" ]; then
            echo "Updating deployment config..."
            cd deployment-config
            git pull origin main || git pull origin master
            cd ..
          else
            echo "Cloning deployment config..."
            git clone https://github.com/${{ github.repository }}.git deployment-config
          fi

          # Set up the complete stack
          echo "Setting up complete Excalidraw stack..."

          # Copy deployment files to excalidraw source
          cp deployment-config/docker-compose.*.yml excalidraw-source/
          cp deployment-config/nginx-internal.conf excalidraw-source/

          # Copy custom backend integration
          cp -r deployment-config/custom-backend excalidraw-source/
          cp -r deployment-config/database excalidraw-source/
          cp -r deployment-config/backend-example excalidraw-source/

          # Copy Docker configs for backend
          cp deployment-config/docker-compose.backend.yml .

          echo "Setting up MongoDB and backend..."

          # Login to GitHub Container Registry
          echo "Logging in to GitHub Container Registry..."
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

          # Check if docker compose is available (newer version) or docker-compose (legacy)
          if command -v docker &> /dev/null && docker compose version &> /dev/null; then
            DOCKER_COMPOSE="docker compose"
          elif command -v docker-compose &> /dev/null; then
            DOCKER_COMPOSE="docker-compose"
          else
            echo "Installing docker-compose..."
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            DOCKER_COMPOSE="docker-compose"
          fi

          echo "Using: $DOCKER_COMPOSE"

          # Set environment variables for production
          export MONGO_ROOT_PASSWORD='${{ secrets.MONGO_ROOT_PASSWORD }}'
          export JWT_SECRET='${{ secrets.JWT_SECRET }}'
          export REDIS_PASSWORD='${{ secrets.REDIS_PASSWORD }}'

          # Stop existing containers (both frontend and backend)
          echo "Stopping existing containers..."
          $DOCKER_COMPOSE -f docker-compose.backend.yml down || true
          $DOCKER_COMPOSE -f excalidraw-source/docker-compose.ghcr.yml down || true
          $DOCKER_COMPOSE -f excalidraw-source/docker-compose.prod.yml down || true

          # Deploy backend stack first (MongoDB + API)
          echo "Deploying MongoDB and backend API..."
          $DOCKER_COMPOSE -f docker-compose.backend.yml up -d --build

          # Wait for backend to be ready
          echo "Waiting for backend services to start..."
          sleep 60

          # Check backend health
          for i in {1..30}; do
            if curl -f http://localhost:3001/health > /dev/null 2>&1; then
              echo "‚úÖ Backend is healthy!"
              break
            fi
            echo "Waiting for backend... ($i/30)"
            sleep 5
          done

          # Work in excalidraw source directory for frontend
          cd excalidraw-source

          # Deploy frontend
          echo "Deploying Excalidraw frontend..."
          if $DOCKER_COMPOSE -f docker-compose.ghcr.yml pull 2>/dev/null; then
            echo "Using pre-built images..."
            $DOCKER_COMPOSE -f docker-compose.ghcr.yml up -d
          else
            echo "Building frontend locally..."
            $DOCKER_COMPOSE -f docker-compose.prod.yml up -d --build
          fi

          # Wait for frontend containers to be healthy
          echo "Waiting for frontend containers to start..."
          sleep 30

          # Go back to main directory for status checks
          cd ..

          # Check status of all services
          echo "=== BACKEND SERVICES STATUS ==="
          $DOCKER_COMPOSE -f docker-compose.backend.yml ps

          echo "=== FRONTEND SERVICES STATUS ==="
          cd excalidraw-source
          $DOCKER_COMPOSE -f docker-compose.ghcr.yml ps 2>/dev/null || $DOCKER_COMPOSE -f docker-compose.prod.yml ps
          cd ..

          # Test all services
          echo "Testing complete stack..."

          # Test backend API
          if curl -f http://localhost:3001/health > /dev/null 2>&1; then
            echo "‚úÖ Backend API is healthy!"
          else
            echo "‚ùå Backend API is not responding"
            exit 1
          fi

          # Test frontend application
          if curl -f http://localhost:8080/health > /dev/null 2>&1; then
            echo "‚úÖ Frontend is healthy!"
          else
            echo "‚ùå Frontend is not responding"
            exit 1
          fi

          # Run MongoDB setup
          echo "Setting up MongoDB database..."
          docker exec excalidraw-mongodb mongosh --eval "
            use excalidraw;
            db.createCollection('users');
            db.createCollection('rooms');
            db.createCollection('scenes');
            print('‚úÖ MongoDB collections created');
          " || echo "MongoDB setup completed or already exists"

          echo "üéâ Complete stack deployment successful!"
          echo "Frontend: https://excalidraw.faku.pro"
          echo "Backend API: https://api.itica.lat"
        EOF

    - name: Notify deployment status
      if: always()
      run: |
        if [ $? -eq 0 ]; then
          echo "üéâ Complete stack deployment to excalidraw.faku.pro successful!"
          echo "‚úÖ MongoDB + Backend API + Frontend all running"
          echo "üîó Frontend: https://excalidraw.faku.pro"
          echo "üîó Backend: https://api.itica.lat"
        else
          echo "‚ùå Deployment failed!"
          exit 1
        fi